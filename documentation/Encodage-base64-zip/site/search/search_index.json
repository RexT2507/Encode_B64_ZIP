{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenue sur le projet Encode base64 & Zip Vous pouvez acc\u00e9der au code source ici . D\u00e9veloppeur du projet MARMIER Baptiste Objectifs du projet Le but de ce projet \u00e9tait de cr\u00e9er un programme en ligne de commande permettant d'encoder des fichiers en base64 et de zipper ces m\u00eames fichiers. Une interface graphique est en cours des r\u00e9flexions pour l'utilisation du logiciel. Partie d\u00e9veloppement en ligne de commande Dans cette partie nous verrons comment j'ai r\u00e9alis\u00e9 ce programme, chaque \u00e9tape de ma r\u00e9flexion les modules utilis\u00e9s etc... Partie d\u00e9veloppement d'une interface graphique Comme dit pr\u00e9c\u00e9demment une interface est en cours des r\u00e9flexions restez en alerte ;)","title":"Accueil"},{"location":"#bienvenue-sur-le-projet-encode-base64-zip","text":"Vous pouvez acc\u00e9der au code source ici .","title":"Bienvenue sur le projet Encode base64 &amp; Zip"},{"location":"#developpeur-du-projet","text":"MARMIER Baptiste","title":"D\u00e9veloppeur du projet"},{"location":"#objectifs-du-projet","text":"","title":"Objectifs du projet"},{"location":"#partie-developpement-en-ligne-de-commande","text":"","title":"Partie d\u00e9veloppement en ligne de commande"},{"location":"#partie-developpement-dune-interface-graphique","text":"","title":"Partie d\u00e9veloppement d'une interface graphique"},{"location":"cmd/","text":"D\u00e9veloppement en ligne de commande : Encode base64 & Zip Vous pouvez acc\u00e9der au code source ici . Ajout des modules On ajoute les modules dans le programme : On va lister ces modules : fs - Le module du syst\u00e8me de fichiers Node.js vous permet de travailler avec le syst\u00e8me de fichiers de votre ordinateur. btoa - Le module vous permet d'encoder le contenu de votre Buffer en Base64. adm-zip - Le module vous permet de zipper en un dossier le contenu de votre Buffer. D\u00e9finition des options du script On va d\u00e9finir les options du script : La construction des options d'un script nodejs a toujours le m\u00eame sch\u00e9ma : argv[0] - Corresponds \u00e0 l'ex\u00e9cutable de NodeJs. argv[1] - Corresponds au nom du script appel\u00e9. argv[2] - Corresponds au nom du fichier source que l'on veut traiter. Les autres argv sont les options du programme. Ajout du syst\u00e8me de flag On va ajouter notre syst\u00e8me de flag, afin de s\u00e9lectionner les options de traitement que l'on veut effectuer : Dans un premier temps on va cr\u00e9er une fonction qui permet de r\u00e9cup\u00e9rer les flags des diff\u00e9rents process et si jamais l'index est d\u00e9j\u00e0 lu on parcourt l'index suivant. On d\u00e9finit les flags pour l'encode, le zippage et les autres : --base64 - Permets d'encoder le fichier en base64. --zip - Permets de zipper le fichier en zip. --base64_zip - Permets d'encoder un point zip. Ajout des tests sur la position des arguments Il est important de pouvoir effectuer des tests, par exemple de savoir si on r\u00e9cup\u00e8re bien le fichier ou encore pour v\u00e9rifier la position des diff\u00e9rents arguments du programme. Pour l'instant il faut d\u00e9commenter ces tests afin de pouvoir y acc\u00e9der mais pourquoi ne pas faire un flag pour appeler le test ou les tests qu'il nous faut. Ajout de la structure des cas d'utilisation du programme Pas de code seulement un grand commentaire, bien structurer son code est toujours important ;) ! Premier cas encodage en base64 mais pas de zip Nous allons voir le premier cas d'utilisation du programme on re\u00e7oit un fichier, puis on encode ce fichier en un fichier en .txt qui contient le contenu de notre fichier en base64. Pour cela nous allons utiliser le flag --base64, nous allons donc utiliser une condition pour dire que la balise de base64 est \u00e0 true. Bien \u00e9videmment le zip ne fonctionnera pas dans le premier cas. Regardons le code. Deuxi\u00e8me cas zippage du fichier mais pas d'encodage Nous allons voir le deuxi\u00e8me cas d'utilisation du programme on re\u00e7oit un fichier, puis on zip de fichier en un .zip qui contient notre fichier compress\u00e9. Pour cela nous allons utiliser le flag --zip, nous allons donc utiliser une condition pour dire que la balise de zip est \u00e0 true. Bien \u00e9videmment l'encodage ne fonctionnera pas dans le deuxi\u00e8me cas. Regardons le code. Troisi\u00e8me cas encodage et zippage du fichier Nous allons voir le troisi\u00e8me cas d'utilisation du programme on re\u00e7oit un fichier, puis on encode le fichier et ont le zip, on effectue les deux t\u00e2ches pr\u00e9c\u00e9dentes. Pour cela on utilise les deux flags pr\u00e9c\u00e9dents --base64 et --zip, il y a une condition qui va v\u00e9rifier que les deux balises soient \u00e0 true pour effectuer les actions. Quatri\u00e8me cas encodage du zip Nous allons voir le quatri\u00e8me cas d'utilisation du programme on re\u00e7oit un fichier, puis on zip ce fichier et on encode le fichier zip. Cette fonction du programme a \u00e9t\u00e9 cr\u00e9er \u00e0 la suite d'une demande d'un utilisateur qui ne voulait pas lancer le programme deux fois pour zipper puis pour encoder ! La fonctionnalit\u00e9 a donc \u00e9t\u00e9 rajout\u00e9e ;) Pour cela nous allons utiliser le flag --base64_zip Retour en cas d'argument absent Il faut penser \u00e0 mettre une erreur si on ne saisit aucun argument, cela va de soi ! On en a fini avec la partie d\u00e9veloppement !","title":"Ligne de commande"},{"location":"cmd/#developpement-en-ligne-de-commande-encode-base64-zip","text":"Vous pouvez acc\u00e9der au code source ici .","title":"D\u00e9veloppement en ligne de commande : Encode base64 &amp; Zip"},{"location":"cmd/#ajout-des-modules","text":"","title":"Ajout des modules"},{"location":"cmd/#definition-des-options-du-script","text":"","title":"D\u00e9finition des options du script"},{"location":"cmd/#ajout-du-systeme-de-flag","text":"","title":"Ajout du syst\u00e8me de flag"},{"location":"cmd/#ajout-des-tests-sur-la-position-des-arguments","text":"","title":"Ajout des tests sur la position des arguments"},{"location":"cmd/#ajout-de-la-structure-des-cas-dutilisation-du-programme","text":"","title":"Ajout de la structure des cas d'utilisation du programme"},{"location":"cmd/#premier-cas-encodage-en-base64-mais-pas-de-zip","text":"","title":"Premier cas encodage en base64 mais pas de zip"},{"location":"cmd/#deuxieme-cas-zippage-du-fichier-mais-pas-dencodage","text":"","title":"Deuxi\u00e8me cas zippage du fichier mais pas d'encodage"},{"location":"cmd/#troisieme-cas-encodage-et-zippage-du-fichier","text":"","title":"Troisi\u00e8me cas encodage et zippage du fichier"},{"location":"cmd/#quatrieme-cas-encodage-du-zip","text":"","title":"Quatri\u00e8me cas encodage du zip"},{"location":"cmd/#retour-en-cas-dargument-absent","text":"","title":"Retour en cas d'argument absent"},{"location":"graph/","text":"","title":"Interface graphique"},{"location":"user_cmd/","text":"Utilisation du programme en ligne de commande : Encode base64 & Zip Nous allons voir comment utiliser le programme en ligne de commande, avant toute chose assurez-vous d'avoir bien lu le readme qui contient toute la proc\u00e9dure d'installation des logiciels n\u00e9cessaires au fonctionnement du logiciel. Lancer le programme Dans un premier temps allez dans le dossier ou vous avez t\u00e9l\u00e9charg\u00e9 le programme et ouvrez une invite de commande. On va maintenant placer les arguments dans le bon ordre, pour commencer NodeJs, puis le nom du programme, le fichier que l'on veut traiter et enfin les options de traitement que l'on veut lui appliquer. Voil\u00e0 nous avons plac\u00e9 nos arguments, nous allons voir par la suite les diff\u00e9rentes options que l'on peut utiliser dans ce programme. Il est important de noter que l'on peut lire un fichier de n'importe o\u00f9 et l'\u00e9crire n'importe o\u00f9, il suffit de pr\u00e9ciser le chemin. Par exemple : node encode_b64_zip.js C:\\Users\\BAM\\Documents\\exemple_fichier.pdf Premier cas encodage en base64 mais pas de zip Pour encoder un fichier en base64, il suffit de donner le fichier en entr\u00e9e suivi de l'option --base64 suivit du nom de fichier. Comme je l'ai dit pr\u00e9c\u00e9demment il est possible de donner le dossier de destination en plus du nom de fichier en sortie. Par exemple : node encode_b64_zip.js exemple_fichier.pdf --base64 C:\\Users\\BAM\\Documents\\resultats\\exemple.txt On appuie sur entr\u00e9e pour commencer le traitement Voil\u00e0 le traitement c'est bien effectu\u00e9, on peut lire le message nous le confirmant. Voyons le r\u00e9sultat : Nous avons bien nos deux fichiers, le fichier source qui est intact et le fichier.txt qui contient le fichier pr\u00e9c\u00e9dent encod\u00e9 en base64. Regardons le contenu pour \u00eatre s\u00fbr : Ok le fichier est bien encod\u00e9 :) Deuxi\u00e8me cas zippage du fichier mais pas d'encodage Pour zipper un fichier il suffit de donner le fichier en entr\u00e9e suivi de l'option --zip suivit du nom de fichier. On appuie sur entr\u00e9e pour commencer le traitement Voil\u00e0 le traitement c'est bien effectu\u00e9, on peut lire le message nous le confirmant. Voyons le r\u00e9sultat : On retrouve bien notre fichier source dans le zip ! Troisi\u00e8me cas encodage et zippage du fichier Pour encoder un fichier et le zipper, effectuer les deux actions pr\u00e9c\u00e9dentes en sommes ;) Il suffit d'utiliser les deux commandes pr\u00e9c\u00e9dentes en une seule ! On appuie sur entr\u00e9e pour commencer le traitement Voil\u00e0 le traitement c'est bien effectu\u00e9, on peut lire le message nous le confirmant. Voyons le r\u00e9sultat : Quatri\u00e8me cas encodage du zip Cette fonction du programme a \u00e9t\u00e9 cr\u00e9er \u00e0 la suite d'une demande d'un utilisateur qui ne voulait pas lancer le programme deux fois pour zipper puis pour encoder ! La fonctionnalit\u00e9 a donc \u00e9t\u00e9 rajout\u00e9e ;) Pour ce faire on va taper la commande --base64_zip suivi du nom de fichier que l'on veut en sortie Voil\u00e0 le traitement c'est bien effectu\u00e9, on peut lire le message nous le confirmant. Voyons le r\u00e9sultat : Regardons le contenu de notre fichier texte pour \u00eatre parfaitement s\u00fbr : Retour en cas d'argument absent Si on ne saisit pas d'argument dans notre ligne de commande nous verrons le message d'erreur suivant : Rien ne se passe...... Voil\u00e0 vous savez utiliser le programme en ligne de commande.","title":"Utilisation ligne de commande"},{"location":"user_cmd/#utilisation-du-programme-en-ligne-de-commande-encode-base64-zip","text":"","title":"Utilisation du programme en ligne de commande : Encode base64 &amp; Zip"},{"location":"user_cmd/#lancer-le-programme","text":"Dans un premier temps allez dans le dossier ou vous avez t\u00e9l\u00e9charg\u00e9 le programme et ouvrez une invite de commande. On va maintenant placer les arguments dans le bon ordre, pour commencer NodeJs, puis le nom du programme, le fichier que l'on veut traiter et enfin les options de traitement que l'on veut lui appliquer. Voil\u00e0 nous avons plac\u00e9 nos arguments, nous allons voir par la suite les diff\u00e9rentes options que l'on peut utiliser dans ce programme. Il est important de noter que l'on peut lire un fichier de n'importe o\u00f9 et l'\u00e9crire n'importe o\u00f9, il suffit de pr\u00e9ciser le chemin. Par exemple : node encode_b64_zip.js C:\\Users\\BAM\\Documents\\exemple_fichier.pdf","title":"Lancer le programme"},{"location":"user_cmd/#premier-cas-encodage-en-base64-mais-pas-de-zip","text":"","title":"Premier cas encodage en base64 mais pas de zip"},{"location":"user_cmd/#deuxieme-cas-zippage-du-fichier-mais-pas-dencodage","text":"","title":"Deuxi\u00e8me cas zippage du fichier mais pas d'encodage"},{"location":"user_cmd/#troisieme-cas-encodage-et-zippage-du-fichier","text":"","title":"Troisi\u00e8me cas encodage et zippage du fichier"},{"location":"user_cmd/#quatrieme-cas-encodage-du-zip","text":"","title":"Quatri\u00e8me cas encodage du zip"},{"location":"user_cmd/#retour-en-cas-dargument-absent","text":"","title":"Retour en cas d'argument absent"}]}